intro <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.");
return(intro)
}
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.");
return(intro)
}
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is "Tanner", and I'm "19" years old.");
return(intro)
}
intro <- paste0("Hello, my name is Tanner, and I'm "19" years old.");
intro <- paste0("Hello, my name is Tanner, and I'm 19 years old.");
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is Tanner, and I'm 19 years old.");
return(intro)
}
make_introduction <- function("Tanner", 19) {
intro <- paste0("Hello, my name is Tanner, and I'm 19 years old.");
return(intro)
}
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is Tanner, and I'm 19 years old.");
return(intro)
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- my_name + my_age
my_intro
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- function(my_name, my_age)
my_intro
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- (my_name, my_age)
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- c(my_name, my_age)
my_intro
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- c(make_introduction)
my_intro
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- c(make_introduction)
my_intro
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
my_intro
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is my_name, and I'm my_age years old.");
return(intro)
}
make_introduction
my_intro
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
my_intro
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is name, and I'm age years old.");
return(intro)
}
make_introduction
my_intro
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
my_intro
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is Tanner, and I'm 19 years old.");
return(intro)
}
make_introduction
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
my_intro
my_intro
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub("Hey, I'm in your")my_intro
casual_intro
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub("Hey, I'm in your")function(my_intro)
casual_intro
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub("Hey, I'm in your") function(my_intro)
casual_intro
?sub()
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub(my_intro, "Hey, I'm in your")
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub(my_intro, x, "Hey, I'm in your")
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub(my_intro, make_introduction(my_name, my_age) "Hey, I'm in your")
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub(my_intro,  "Hey, I'm in your")
casual_intro
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
Casual_intro <- str_replace(my_intro, “Hello, my name is”, “Hey, I’m”)
Casual_intro
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- str_replace(my_intro, "Hello, my name is”, “Hey, I’m”)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all capital letters
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all lower-case letters
# Create a new variable `capitalized_intro`, which is your `my_intro` variable
# but with each word capitalized
# Hint: Google search the stringr function `str_to_title`
# Using the `str_count` function from stringr, create a variable `occurrences`
# that stores the # of times the letter "e" appears in `my_intro`
# Write a function `double()` that takes in a value and
# returns that value multiplied by 2
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
# Write a function `cube()` that takes in a value and returns that value cubed
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
# Create a function `inches_to_cm` that converts from inches to centimeters
# Create a variable `inches_tall` that is your (numeric) height in inches
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables and return the argument which has more occurrences of "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
### Vectors ###################################################################
# Create a vector `movies` that contains the names of six movies you like
# Create a vector `top_three` that only contains the first three movies of
# your `movies` list (e.g., index 1 through index 3)
# You should do this by subsetting the vector, do not just retype the movies
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase " is a great movie!" to the end of each element in `movies`
# Create a vector `without_four` that omits the fourth element from `movies`
# You should do this by using a _negative index_
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
# Hints:
# - See chapter 7.4 in the book for vector filtering
# - Google search "modulo operator in R"
# Create a vector `numbers` that is the numbers 700 through 999
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of the vector `numbers`
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of the vector `numbers`
# Using the `median()` function, create a variable `numbers_median`
# that is the median of the vector `numbers`
# Create a vector `lower_numbers` that the values in the `numbers` vector
# that are lower than `numbers_mean`
# Hint: Use vector filtering)
# Create a vector `higher_numbers` that the values in the `numbers` vector
# that are higher than `numbers_mean`
# Hint: Again, use vector filtering
### Lists #####################################################################
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above.
# The list should contain the following _named_ keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
# Create a list `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
### Data Frames ###############################################################
# Create a vector `students` holding 1,000 values representing students
# They should have the values "Student 1", "Student 2",..., "Student 1000"
# Create a vector `math_grades` that holds 1000 random values in it that
# represent grades in a math course
# These values should be normally distributed with a mean of 88 and a
# standard deviation of 10
# Hint: Lookup `rnorm()`
# In the `math_grades` vector, replace any values that are above 100 with
# the number 100
# Hint: Vector filtering
# Create a vector `spanish_grades` that holds 1000 random values in it that
# represent grades in a spanish course
# These values should be normally distributed with a mean of 85 and a
# standard deviation of 12
# Hint: Lookup `rnorm()`
# In the `spanish_grades` vector, replace any values that are above 100 with
# the number 100
# Hint: More vector filtering
# Create a data frame variable named `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
# Create a variable `num_students` that counts the
# number of rows in your dataframe `grades`
# Create a variable `num_courses` that counts the number of courses stored
# in the columns of your `grades` data frame
# Add a new column `grade_diff` to your data frame, which is equal to
# `grades$math_grades` minus `grades$spanish_grades`
# Add another column `better_at_math` as a boolean (TRUE/FALSE) variable that
# indicates that a student got a better grade in math
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
casual_intro
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- str_replace(my_intro, "Hello, my name is”, “Hey, I’m”)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all capital letters
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all lower-case letters
# Create a new variable `capitalized_intro`, which is your `my_intro` variable
# but with each word capitalized
# Hint: Google search the stringr function `str_to_title`
# Using the `str_count` function from stringr, create a variable `occurrences`
# that stores the # of times the letter "e" appears in `my_intro`
# Write a function `double()` that takes in a value and
# returns that value multiplied by 2
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
# Write a function `cube()` that takes in a value and returns that value cubed
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
# Create a function `inches_to_cm` that converts from inches to centimeters
# Create a variable `inches_tall` that is your (numeric) height in inches
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables and return the argument which has more occurrences of "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
### Vectors ###################################################################
# Create a vector `movies` that contains the names of six movies you like
# Create a vector `top_three` that only contains the first three movies of
# your `movies` list (e.g., index 1 through index 3)
# You should do this by subsetting the vector, do not just retype the movies
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase " is a great movie!" to the end of each element in `movies`
# Create a vector `without_four` that omits the fourth element from `movies`
# You should do this by using a _negative index_
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
# Hints:
# - See chapter 7.4 in the book for vector filtering
# - Google search "modulo operator in R"
# Create a vector `numbers` that is the numbers 700 through 999
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of the vector `numbers`
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of the vector `numbers`
# Using the `median()` function, create a variable `numbers_median`
# that is the median of the vector `numbers`
# Create a vector `lower_numbers` that the values in the `numbers` vector
# that are lower than `numbers_mean`
# Hint: Use vector filtering)
# Create a vector `higher_numbers` that the values in the `numbers` vector
# that are higher than `numbers_mean`
# Hint: Again, use vector filtering
### Lists #####################################################################
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above.
# The list should contain the following _named_ keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
# Create a list `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
### Data Frames ###############################################################
# Create a vector `students` holding 1,000 values representing students
# They should have the values "Student 1", "Student 2",..., "Student 1000"
# Create a vector `math_grades` that holds 1000 random values in it that
# represent grades in a math course
# These values should be normally distributed with a mean of 88 and a
# standard deviation of 10
# Hint: Lookup `rnorm()`
# In the `math_grades` vector, replace any values that are above 100 with
# the number 100
# Hint: Vector filtering
# Create a vector `spanish_grades` that holds 1000 random values in it that
# represent grades in a spanish course
# These values should be normally distributed with a mean of 85 and a
# standard deviation of 12
# Hint: Lookup `rnorm()`
# In the `spanish_grades` vector, replace any values that are above 100 with
# the number 100
# Hint: More vector filtering
# Create a data frame variable named `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
# Create a variable `num_students` that counts the
# number of rows in your dataframe `grades`
# Create a variable `num_courses` that counts the number of courses stored
# in the columns of your `grades` data frame
# Add a new column `grade_diff` to your data frame, which is equal to
# `grades$math_grades` minus `grades$spanish_grades`
# Add another column `better_at_math` as a boolean (TRUE/FALSE) variable that
# indicates that a student got a better grade in math
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
my_intro
casual_intro
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub(my_intro, "Hello, my name is”, “Hey, I’m”)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all capital letters
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all lower-case letters
# Create a new variable `capitalized_intro`, which is your `my_intro` variable
# but with each word capitalized
# Hint: Google search the stringr function `str_to_title`
# Using the `str_count` function from stringr, create a variable `occurrences`
# that stores the # of times the letter "e" appears in `my_intro`
# Write a function `double()` that takes in a value and
# returns that value multiplied by 2
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
# Write a function `cube()` that takes in a value and returns that value cubed
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
# Create a function `inches_to_cm` that converts from inches to centimeters
# Create a variable `inches_tall` that is your (numeric) height in inches
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables and return the argument which has more occurrences of "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
### Vectors ###################################################################
# Create a vector `movies` that contains the names of six movies you like
# Create a vector `top_three` that only contains the first three movies of
# your `movies` list (e.g., index 1 through index 3)
# You should do this by subsetting the vector, do not just retype the movies
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase " is a great movie!" to the end of each element in `movies`
# Create a vector `without_four` that omits the fourth element from `movies`
# You should do this by using a _negative index_
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
# Hints:
# - See chapter 7.4 in the book for vector filtering
# - Google search "modulo operator in R"
# Create a vector `numbers` that is the numbers 700 through 999
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of the vector `numbers`
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of the vector `numbers`
# Using the `median()` function, create a variable `numbers_median`
# that is the median of the vector `numbers`
# Create a vector `lower_numbers` that the values in the `numbers` vector
# that are lower than `numbers_mean`
# Hint: Use vector filtering)
# Create a vector `higher_numbers` that the values in the `numbers` vector
# that are higher than `numbers_mean`
# Hint: Again, use vector filtering
### Lists #####################################################################
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above.
# The list should contain the following _named_ keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
# Create a list `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
### Data Frames ###############################################################
# Create a vector `students` holding 1,000 values representing students
# They should have the values "Student 1", "Student 2",..., "Student 1000"
# Create a vector `math_grades` that holds 1000 random values in it that
# represent grades in a math course
# These values should be normally distributed with a mean of 88 and a
# standard deviation of 10
# Hint: Lookup `rnorm()`
# In the `math_grades` vector, replace any values that are above 100 with
# the number 100
# Hint: Vector filtering
# Create a vector `spanish_grades` that holds 1000 random values in it that
# represent grades in a spanish course
# These values should be normally distributed with a mean of 85 and a
# standard deviation of 12
# Hint: Lookup `rnorm()`
# In the `spanish_grades` vector, replace any values that are above 100 with
# the number 100
# Hint: More vector filtering
# Create a data frame variable named `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
# Create a variable `num_students` that counts the
# number of rows in your dataframe `grades`
# Create a variable `num_courses` that counts the number of courses stored
# in the columns of your `grades` data frame
# Add a new column `grade_diff` to your data frame, which is equal to
# `grades$math_grades` minus `grades$spanish_grades`
# Add another column `better_at_math` as a boolean (TRUE/FALSE) variable that
# indicates that a student got a better grade in math
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
casual_intro
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub(my_intro, Hello, my name is, Hey, I’m)
casual_intro
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub(my_intro, "Hello, my name is", "Hey, I’m" )
casual_intro
#7.2 Predefined Data sets
data()
?sleep
?fruit
?fruit
fruit
?fruit
?cars
cars
is.data.frame(cars)
?mtcars
mtcars
?Seatbelts
?Seatbelts
Seatbelts
seatbelts_df <- data.frame(Seatbelts, stringsAsFactors = FALSE)
is.data.frame(seatbelts_df)
head(seatbelts_df)
head
head(seatbelts_df)
install.packages(mlbench)
library(mlbench)
install.packages("mlbench")
library(mlbench)
data("BostonHousing")
read.csv("mycars.csv", stringsAsFactors = FALSE)
#make google sheet as this
read.csv("mycars.csv", stringsAsFactors = FALSE)
#make google sheet as this
read.csv("mycars.csv", stringsAsFactors = FALSE)
read.csv
#make google sheet as this
read.csv("mycars.csv", stringsAsFactors = FALSE)
mycars_df <- read.csv("mycars.cvs", stringsAsFactors = FALSE)
mycar_factors_df <- read.csv("mycars.csv")
mycars_factors_df[3, "Make"] <- "Volvo"
mycars_df[3, "Make"] <- "Volvo"
mycars_df
dream_car_df <- data.frame(Make, Model, Year, Color)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
seahawksscored <- c(21, 28, 27, 27)
seahawksscored
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
points.scored <- c(21, 28, 27, 27)
points.scored
setwd("C:/Users/tanne/info201/book-exercises/chapter-10-exercises/exercise-1")
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub(my_intro, "Hello, my name is", "Hey, I’m" )
library(stringr)
library
library(lintr)
library
