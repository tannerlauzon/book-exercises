# spaces between words, and you should have a space after a comma)
# Hint: Google search for "R paste paste0 difference"
# Try reading a few pages to understand how to use each
make_introduction(my_name , my_age)
# Write a function named `make_introduction()` that takes in
# two arguments called `name` and `age`
# This function should return a string value equal to
# "Hello, my name is {name}, and I'm {age} years old." but {name} and {age}
# should take on the values passed to the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should have a space after a comma)
# Hint: Google search for "R paste paste0 difference"
# Try reading a few pages to understand how to use each
make_introduction <- make_introduction(my_name , my_age)
make_introduction
# Write a function named `make_introduction()` that takes in
# two arguments called `name` and `age`
# This function should return a string value equal to
# "Hello, my name is {name}, and I'm {age} years old." but {name} and {age}
# should take on the values passed to the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should have a space after a comma)
# Hint: Google search for "R paste paste0 difference"
# Try reading a few pages to understand how to use each
make_introduction("name" , "age")
# Write a function named `make_introduction()` that takes in
# two arguments called `name` and `age`
# This function should return a string value equal to
# "Hello, my name is {name}, and I'm {age} years old." but {name} and {age}
# should take on the values passed to the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should have a space after a comma)
# Hint: Google search for "R paste paste0 difference"
# Try reading a few pages to understand how to use each
make_introduction( {name} , {age})
# Write a function named `make_introduction()` that takes in
# two arguments called `name` and `age`
# This function should return a string value equal to
# "Hello, my name is {name}, and I'm {age} years old." but {name} and {age}
# should take on the values passed to the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should have a space after a comma)
# Hint: Google search for "R paste paste0 difference"
# Try reading a few pages to understand how to use each
make_introduction('name', 'age')
# Write a function named `make_introduction()` that takes in
# two arguments called `name` and `age`
# This function should return a string value equal to
# "Hello, my name is {name}, and I'm {age} years old." but {name} and {age}
# should take on the values passed to the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should have a space after a comma)
# Hint: Google search for "R paste paste0 difference"
# Try reading a few pages to understand how to use each
make_introduction <- make_introduction("name", "age")
# Write a function named `make_introduction()` that takes in
# two arguments called `name` and `age`
# This function should return a string value equal to
# "Hello, my name is {name}, and I'm {age} years old." but {name} and {age}
# should take on the values passed to the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should have a space after a comma)
# Hint: Google search for "R paste paste0 difference"
# Try reading a few pages to understand how to use each
make_introduction <- function("name", "age")
# Write a function named `make_introduction()` that takes in
# two arguments called `name` and `age`
# This function should return a string value equal to
# "Hello, my name is {name}, and I'm {age} years old." but {name} and {age}
# should take on the values passed to the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should have a space after a comma)
# Hint: Google search for "R paste paste0 difference"
# Try reading a few pages to understand how to use each
make_introduction <- function(my_name, my_age)
make_introduction
make_introduction <- function(my_name, my_age)
# Write a function named `make_introduction()` that takes in
# two arguments called `name` and `age`
# This function should return a string value equal to
# "Hello, my name is {name}, and I'm {age} years old." but {name} and {age}
# should take on the values passed to the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should have a space after a comma)
# Hint: Google search for "R paste paste0 difference"
# Try reading a few pages to understand how to use each
make_introduction("Tanner", 19)
make_introduction
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.");
return(intro)
}
make_introduction
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is ", Tanner, ", and I'm ", 19, " years old.");
return(intro)
}
make_introduction
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is ", Tanner, ", and I'm ", 19, " years old.");
return(intro)
}
make_introduction
intro <- paste0("Hello, my name is , Tanner, , and I'm , 19,  years old.");
intro <- paste0("Hello, my name is Tanner, and I'm 19,  years old.");
intro <- paste0("Hello, my name is Tanner, and I'm 19, years old.");
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.");
return(intro)
}
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is ", my_name, ", and I'm ", my_age, " years old.");
return(intro)
}
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is "my_name", and I'm "my_age" years old.");
return(intro)
}
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is (my_name), and I'm (my_age) years old.");
return(intro)
}
make_introduction <- function(my_name, my_age) {
intro <- paste0("Hello, my name is (my_name), and I'm (my_age), years old.");
return(intro)
}
make_introduction <- function(my_name, my_age) {
intro <- paste0("Hello, my name is [my_name], and I'm (my_age), years old.");
return(intro)
}
intro <- paste0("Hello, my name is "my_name", and I'm (my_age), years old.");
make_introduction <- function(my_name, my_age) {
intro <- paste0("Hello, my name is "my_name", and I'm (my_age), years old.");
return(intro)
}
make_introduction <- function(my_name, my_age) {
intro <- paste0("Hello, my name is 'my_name', and I'm (my_age), years old.");
return(intro)
}
library(stringr)
library
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.");
return(intro)
}
intro <- paste0("Hello, my name is ", my_name, ", and I'm ", my_age, " years old.");
intro <- paste0("Hello, my name is ", "Tanner", ", and I'm ", 19, " years old.");
intro <- paste0("Hello, my name is ", Tanner, ", and I'm ", 19, " years old.");
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.");
return(intro)
}
make_introduction <- function(Tanner, 19) {
intro <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.");
return(intro)
}
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.");
return(intro)
}
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.");
return(intro)
}
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is "Tanner", and I'm "19" years old.");
return(intro)
}
intro <- paste0("Hello, my name is Tanner, and I'm "19" years old.");
intro <- paste0("Hello, my name is Tanner, and I'm 19 years old.");
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is Tanner, and I'm 19 years old.");
return(intro)
}
make_introduction <- function("Tanner", 19) {
intro <- paste0("Hello, my name is Tanner, and I'm 19 years old.");
return(intro)
}
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is Tanner, and I'm 19 years old.");
return(intro)
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- my_name + my_age
my_intro
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- function(my_name, my_age)
my_intro
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- (my_name, my_age)
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- c(my_name, my_age)
my_intro
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- c(make_introduction)
my_intro
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- c(make_introduction)
my_intro
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
my_intro
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is my_name, and I'm my_age years old.");
return(intro)
}
make_introduction
my_intro
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
my_intro
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is name, and I'm age years old.");
return(intro)
}
make_introduction
my_intro
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
my_intro
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is Tanner, and I'm 19 years old.");
return(intro)
}
make_introduction
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
my_intro
my_intro
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub("Hey, I'm in your")my_intro
casual_intro
devtools::install_github("rstudio/addinexamples", type = "source"
devtools
install_github
devtools::install_github("rstudio/addinexamples", type = "source"
install_github("rstudio/addinexamples", type = "source"
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all capital letters
loud_intro <-
install.packages(lintr)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employees", 1:100)
employees
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif("Salaries", min = 40000, max = 50000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
salaries_2017
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, -5000, 1000)
salary_adjustments
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
stringsAsFactors=FALSE
stringsAsFactors
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors=FALSE)
salaries
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$salary_adjustments
salaries$salaries_2018
movies$world_boxoffice <- c(161457670, 148868669, 54681173)
movies$world_boxoffice
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_a_raise <- salaries$salaries_2018 > salaries$salaries_2017
salaries$got_a_raise <- salaries$salaries_2018 > salaries$salaries_2017
salaries$got_a_raise
# What was the 2018 salary of Employee 57
salaries_57 <- salaries[salaries$employees == "Employee 57", "salries_2018"]
salaries_57
# How many employees got a raise?
nrow(salaries[salaries$got_a_raise == TRUE, ])
nrow
# How many employees got a raise?
nrow(salaries[salaries$got_a_raise == TRUE, ])
# What was the dollar value of the highest raise?
hightest_raise <- max(salaries$salary_adjustments)
hightest_raise
# What was the "name" of the employee who received the highest raise?
employee_highest_raise <- salaries[salaries$salary_adjustments == hightest_raise]
# What was the "name" of the employee who received the highest raise?
employee_highest_raise <- salaries[salaries$salary_adjustments == hightest_raise, "employees"]
employee_highest_raise
# What was the largest decrease in salaries between the two years?
largest_decrease <- min(salaries$salary_adjustments)
largest_decrease
# What was the name of the employee who recieved largest decrease in salary?
got_largest_decrease <- salaries[salaries$salary_adjustments == biggest_paycut, "employees"]
# What was the name of the employee who recieved largest decrease in salary?
got_largest_decrease <- salaries[salaries$salary_adjustments == largest_decrease, "employees"]
got_largest_decrease
# What was the average salary change?
avg_increase <- mean(salaries$salary_adjustments)
avg_increase
# For people who did not get a raise, how much money did they lose on average?
avg_loss <- mean(salaries$salary_adjustments[salaries$got_raise == FALSE])
avg_loss
# For people who did not get a raise, how much money did they lose on average?
avg_loss <- mean(salaries$salary_adjustments[salaries$got_a_raise == FALSE])
avg_loss
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "salaries.csv")
write.csv
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
data
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
usp_expend <- data.frame(USPersonalExpenditure)
usp_expend
# What are the column names of your dataframe?
colnames(usp_expend)
# What are the column names of your dataframe?
colnames(usp_expend)
# What are the row names of your dataframe?
rownames(usp_expend)
# Add a column "category" to your data frame that contains the rownames
usp_expend$category <- rownames(usp_expend)
usp_expend$category
# How much money was spent on personal care in 1940?
care_1940 <- usp_expend["Personal Care", "X1940"]
# How much money was spent on personal care in 1940?
personal_care_1940 <- usp_expend["Personal Care", "X1940"]
personal_care_1940
# How much money was spent on Food and Tobacco in 1960?
food_1960 <- usp_expend["Person Care", "X1940"]
food_1960
# How much money was spent on Food and Tobacco in 1960?
food_1960 <- usp_expend["Person Care", "X1960"]
food_1960
# How much money was spent on Food and Tobacco in 1960?
food_1940 <- usp_expend["Person Care", "X1940"]
food_1940
# How much money was spent on Food and Tobacco in 1960?
food_1940 <- usp_expend["Food and Tobacco", "X1940"]
food_1940
# What was the highest expenditure category in 1960?
highest_expend_1960 <- usp_expend$category[us_exp$X1960 == max(us_exp$X1960)]
# What was the highest expenditure category in 1960?
highest_expend_1960 <- usp_expend$category[usp_expend$X1960 == max(us_exp$X1960)]
# What was the highest expenditure category in 1960?
highest_expend_1960 <- usp_expend$category[usp_expend$X1960 == max(usp_expend$X1960)]
# What was the highest expenditure category in 1960?
highest_expend_1960 <- usp_expend$category[usp_expend$X1960 == max(usp_expend$X1960)]
highest_expend_1960
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
col <- paste0("X", year)
usp_expend$category[usp_expend[, col] == min(usp_expend[, col])]
}
lowest_category
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest <- sapply(seq(1940, 1960, 5), lowest_category)
lowest
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "salaries.csv")
# Chapter 10 Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employees", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, -5000, 1000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors=FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$salary_adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_a_raise <- salaries$salaries_2018 > salaries$salaries_2017
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries_57 <- salaries[salaries$employees == "Employee 57", "salries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_a_raise == TRUE, ])
# What was the dollar value of the highest raise?
hightest_raise <- max(salaries$salary_adjustments)
# What was the "name" of the employee who received the highest raise?
employee_highest_raise <- salaries[salaries$salary_adjustments == hightest_raise, "employees"]
# What was the largest decrease in salaries between the two years?
largest_decrease <- min(salaries$salary_adjustments)
# What was the name of the employee who recieved largest decrease in salary?
got_largest_decrease <- salaries[salaries$salary_adjustments == largest_decrease, "employees"]
# What was the average salary change?
avg_increase <- mean(salaries$salary_adjustments)
# For people who did not get a raise, how much money did they lose on average?
avg_loss <- mean(salaries$salary_adjustments[salaries$got_a_raise == FALSE])
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "salaries.csv")
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "salaries.csv")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(data/gates_money.csv)
setwd("C:/Users/tanne/info201/book-exercises/chapter-10-exercises/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(data/gates_money.csv)
setwd("~/")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(data/gates_money.csv)
setwd("C:/Users/tanne/info201/book-exercises/chapter-10-exercises/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(data/gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grant <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
grant
# Use the View function to look at the loaded data
View(grant)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector("organization")
# What was the mean grant value?
grant$mean
# What was the mean grant value?
mean <- mean(grants$total_amount)
mean
# What was the dollar amount of the largest grant?
largest_grant_amount <- max(grants$total_amount)
largest_grant_amount
# What was the dollar amount of the smallest grant?
smallest_grant_amount <- min(grants$total_amount)
smallest_grant_amount
# Which organization received the largest grant?
organization_largest_grant <- max(grants$organization)
organization_largest_grant
# Which organization received the largest grant?
organization_largest_grant <- organization[grants$total_amount == highest_amount]
# Which organization received the largest grant?
organization_largest_grant <- organization[grants$total_amount == largest_grant_amount]
organization_largest_grant
# Which organization received the smallest grant?
organization_smallest_grant <- organization[grants$total_amount == smallest_grant_amount]
organization_smallest_grant
# How many grants were awarded in 2010?
grants_2010 <- grants$2010
# How many grants were awarded in 2010?
length(grants$total_amount[grants$start_year == 2010])
